
These are the operations we implement or describe in TODOs in
punctaffy-lib/punctaffy/multi-phase/private/trees2.rkt as of the time
of writing this:

converting hypertees and their representation details back and forth
(define (hypertee-promote new-degree ht)
(define (hypertee-contour hole-value ht)
(define (hypertee-tunnel hole-value ht)
  probably don't need it
(define (hypertee-join-all-degrees ht)
(define (hypertee-map-all-degrees ht func)
(define (hypertee-map-one-degree ht degree func)
  simple implementation
(define (hypertee-map-pred-degree ht degree func)
  simple implementation
(define (hypertee-map-highest-degree ht func)
  simple implementation
(define (hypertee-pure degree data hole)
  simple implementation
(define (hypertee-bind-all-degrees ht hole-to-ht)
  simple implementation
(define (hypertee-bind-one-degree ht degree func)
  simple implementation
(define (hypertee-bind-pred-degree ht degree func)
  simple implementation
(define (hypertee-bind-highest-degree ht func)
  simple implementation
(define (hypertee-each-all-degrees ht body)
  simple implementation
converting hyprids and their representation details back and forth
(define (hyprid-degree h)
(define (hyprid-map-lakes-highest-degree h func)
(define (hyprid-destripe-maybe h)
(define (hyprid-fully-destripe h)
  simple implementation
(define (hyprid-stripe-maybe h)
reverse
  (not implemented yet)
(define (hypertee-truncate new-degree ht)
(define (hypertee-zip a b func)
(define (hypertee-zip-low-degrees smaller bigger func)


We can probably implement the following in different ways:

(define (hypertee-promote new-degree ht)
  implement in terms of hyprid-destripe-maybe
(define (hypertee-contour hole-value ht)
  implement in terms of hypertee-pure
(define (hypertee-pure degree data hole)
  implement on its own, not depending on hypertee-contour
(define (hypertee-zip a b func)
  don't implement it a different way, but just think of it as part of
  the implementation of `hypertee-zip-low-degrees`


That means if we want to make something representation-agnostic enough
to handle having trees or some other structure at the lowest degree,
rather than always sequences, we should consider how to do these
things:

converting hypertees and their representation details back and forth
(define (hypertee-pure degree data hole)
(define (hypertee-join-all-degrees ht)
(define (hypertee-map-all-degrees ht func)
converting hyprids and their representation details back and forth
(define (hyprid-degree h)
(define (hyprid-map-lakes-highest-degree h func)
(define (hyprid-destripe-maybe h)
(define (hyprid-stripe-maybe h)
reverse
(define (hypertee-truncate new-degree ht)
(define (hypertee-zip-low-degrees smaller bigger func)


Let's sort those a little better.

Let's have "type class" dictionaries for things that have monad
operations:

hypermonad:
  
  ; This is a contract that classifies whether a value is an
  ; appropriate hypersnippet for this hypermonad.
  hypersnippet/c
  
  ; This is the degree of the hypermonad, i.e. how many degrees of
  ; holes may be encountered in a value.
  degree
  
  ; This returns a hypermonad where high-degree holes are prohibited.
  ; The valid hypersnippets may be disjoint from this hypermonad's
  ; valid hypersnippets as well.
  hole-hypermonad-for-degree degree
  
  ; This returns a hyperzip instance where `first` is a
  ; `hypermonad-ignoring-highest` of this hypermonad and `second` is
  ; the corresponding `hole-hypermonad-for-degree`.
  hole-hyperzip-for-degree degree
  
  ; We redundantly cover several monad operations so that they can be
  ; implemented efficiently.
  map-with-degree-and-shape h func
  bind-with-degree-and-shape h func
  pure hole-degree hole-shape data
  join h
  
  ; We provide separate operations for potentially more efficient
  ; variations.
  map-with-degree h func
  bind-with-degree h func

The trickiest operation is going to be zipping multiple hypertees of
similar shape together. The biggest reason we need a zipping operation
at all is as a way to implement `bind-with-degree-and-shape`; it lets
us associate the low-degree holes of the `func` result with their
respective neighboring data, so that they can be seamlessly
concatenated into it. It's also a sufficient operation for whenever we
want to check whether data is "the right shape"; we zip the data
together with a hypersnippet that represents the shape we need it to
be, and if it fails, it's the wrong shape.

For `hypermonad-striped` hypersnippets of degree N, we should be
able to zip the N-minus-2-degree holes just by requiring the
(N-minus-1-degree) island hypermonad to have a zippable hypermonad
over the lowest N-minus-2 degrees.

That leaves us with the task of zipping the degree-N-minus-1 holes,
which it seems like we *could* do if we also knew the island
hypersnippets, the lake hypersnippets, and the low-degree
hypersnippet all belonged to `hypermonad-striped` hypermonads, and
that the low-degree hypersnippet's islands zipped with a particular
combination hypermonad made out of the islands' islands and lakes'
islands.

That is how we're going to approach this. For certain hypermonads we
may have ready-made zipping operations ready to go, but for the case
where we're making a high-degree hypermonad out of a tower of
`hypermonad-striped` abstractions, we'll take advantage of that
knowledge at each step as we construct it. At the lowest degree, where
we don't have another `hypermonad-striped` to rely on, we'll rely on a
very low-degree zipping operation, which should be easier to
implement. For cases where our basic syntax is a monoid, we'll be able
to zip the degree-1 hypersnippets trivially, since they always have
exactly one hole and it's always of degree 0.

hyperzip:
  
  ; These are hypermonad instances, and they must all have the same
  ; degree.
  first
  second
  combination
  
  ; This takes a hypersnippet from the `first` hypermonad instance and
  ; a hypersnippet from the `second` hypermonad instance and returns a
  ; maybe which contains a hypersnippet from the `combination`
  ; hypermonad instance with with the same holes as both, if they have
  ; the same holes. The values of the holes are cons cells containing
  ; the original values.
  zip-maybe first-h second-h
  
  ; Given a `combination` hypersnippet value, these return a `first`
  ; or a `second` hypersnippet with the same holes, containing the
  ; same values in those holes.
  get-first h
  get-second h
  
  ; This is a hyperzip where `first` and `second` are swapped and
  ; where `flip` is this hyperzip.
  flip
  
  ; This converts a hypersnippet from `combination` into the
  ; `combination` of `flip`.
  to-flip h

monad:
  tree/c
  map t func
  bind t func
  pure t
  join t

monoid:
  segment/c
  empty
  append a b


We'll want these building blocks for those type class instances:

; This is a degree-0 hypermonad.
(define (hypermonad-zero)

; Given a monad, this creates a degree-1 hypermonad.
(define (hypermonad-from-monad monad)

; This monad does nothing. All map and bind operations just process
; the value itself.
(define (monad-identity)

; This monoid has only one segment, namely the empty list.
(define (monoid-trivial)

; Given two degree-N hypermonads where N is at least 1, as well as two
; contracts, this creates a degree-N+1 hypermonad where the
; hypersnippets are made of islands and lakes.
(define (hypermonad-striped island-hypermonad lake-hypermonad)

; Given a monoid, returns a monad where a valid tree is a cons cell
; whose first element is a valid segment of the monoid.
(define (monad-from-monoid monoid)

; This hyperzip zips a hypermonad with itself, and that hypermonad in
; particular is `hypermonad-from-monad` for `monad-identity`.
(define (hyperzip-identity-identity)

; Given a monoid, returns a hyperzip where the `first` is
; `hypermonad-from-monad` for `monad-identity` and the `second` is
; `hypermonad-from-monad` for `hypermonad-from-monoid` for that
; monoid.
(define (hyperzip-monoid monoid)

; Given two hyperzips where the `first` is `hypermonad-from-monad` for
; `monad-identity`, returns a third such hyperzip where the `second`
; is the `hypermonad-striped` of the original two `second`
; hypermonads.
(define (hyperzip-identity-striped island-hyperzip lake-hyperzip)

; Given a degree and a hypermonad, this returns a hypermonad where the
; valid hypersnippets are the same, but only the lower-degree holes
; count as holes.
(define (hypermonad-ignoring-highest degree hypermonad)

; Given a degree and a hypermonad, this returns a hypermonad where the
; valid hypersnippets are the same, but only the higher-degree holes
; count as holes.
(define (hypermonad-ignoring-lowest degree hypermonad)

; Given a degree and a hypermonad, this returns a hypermonad where not
; only do the lower-degree holes not count as holes, but in the
; representation, they must contain empty lists.
(define (hypermonad-trivializing-lowest degree hypermonad)
(define (to-hypermonad-trivializing-lowest degree hypermonad h)
(define (from-hypermonad-trivializing-lowest h)

; Given two hyperzips of the same degree, this returns a hyperzip
; where `first` and `second` are the `hypermonad-striped` of the
; respective `first` and `second` hypermonads.
(define (hyperzip-striped island-hyperzip lake-hyperzip)

; Given a degree-0 hypermonad, this retrns a hyperzip where `first`
; and `combination` are that hypermonad, and `second` is
; `hypermonad-zero`.
(define (hyperzip-zero hypermonad)

; Given a hyperzip, this returns a hyperzip where `first` and `second`
; have traded places, but `combination` remains the same.
(define (hyperzip-backwards hz)

; Given two hyperzips where the `first` hypermonad of the first is the
; same as the `second` of the second, this returns a hyperzip where
; `first` is the `first` of the second one and `second` is the
; `combination` of the first one. Here's a visualization:
;
;   Zip a b -> Zip c a -> Zip c (a, b)
;
(define
  (hyperzip-third-wheel combination-hyperzip third-wheel-hyperzip)


We've now implemented all of those except for:

(define (hypermonad-from-monad monad)
(define (hypermonad-striped island-hypermonad lake-hypermonad)
(define (hyperzip-identity-identity)
(define (hyperzip-monoid monoid)
(define (hyperzip-identity-striped island-hyperzip lake-hyperzip)
(define (hypermonad-ignoring-highest degree hypermonad)
(define (hypermonad-ignoring-lowest degree hypermonad)
(define (hypermonad-trivializing-lowest degree hypermonad)
(define (to-hypermonad-trivializing-lowest degree hypermonad h)
(define (from-hypermonad-trivializing-lowest h)
(define (hyperzip-striped island-hyperzip lake-hyperzip)
(define
  (hyperzip-third-wheel combination-hyperzip third-wheel-hyperzip)

...and yet we also went back and deleted a lot of things (the whole
`hyperzip` type class, the "/c" methods of every type class, and the
`hypermonad` type class's `degree` and `hole-hyperzip-for-degree`
methods).


TODO: Implement the rest, or rather implement whatever's needed so we
can implement `hypermonad-striped`.

TODO: Consider the reversal operation again. Even if we don't
implement it, we can at least update the design notes in the TODO in
multi-phase/private/trees2.rkt.


============

(This are some stream-of-consciousness notes toward an implementation
of `hypermonad-striped`. It's still challenging at this point, and
some inelegance in the type classes is showing again.)


To make a striped hypermonad that can be properly zipped, we need to pass in:

  island's island hypermonad
  island's lake hypermonad
  lake's island hypermonad
  lake's lake hypermonad

To zip this striped hypermonad with its highest-degree hole hypermonad (namely the striped hypermonad of the lake's island hypermonad and the lake's lake hypermonad)...

we'll need a way to zip these:

  A) the striped hypermonad of the island's island hypermonad and the lake's island hypermonad
  B) the lake's island hypermonad

but fortunately, B is the highest-degree hole hypermonad of A, so as long as we can get A, we can zip them.

A tricky part is that we can't construct A directly, since in order to construct that the same way as this one, we'll need the striped components of the the island's island hypermonad and the lake's island hypermonad. In other words, we'll need to take 8 hypermonads. And then we just get to the same problem. What we really need is to provide A as its own parameter:

We need to pass in:

  island's island hypermonad
  island's lake hypermonad
  lake's island hypermonad (redundant)
  lake's lake hypermonad
  the striped hypermonad of the island's island hypermonad and the lake's island hypermonad


When we're zipping a double-striped hypersnippet with its highest-degree hole, it looks roughly like this:

^2(  ~1(  ,(  ,(  )  )  )  ,(  )  )
   ii   li  ii  il ii li ii  il ii

^1(           ,(  )        ,(  )  )
   hi           hl hi        hl hi

The representation of the higher-degree one is:

  (fix x.
    stripe-snippet
      (stripe-snippet (snippet-of ii) (snippet-of il))
      (stripe-snippet (snippet-of li) (snippet-of x)))

Let (double-stripe-snippet ii il li) be shorthand for that. Let
(double-stripe ii il li ll ???) be shorthand for the hypermonad
(including those question marks since we don't know all the arguments
we need yet).

An alternate representation is

  (stripe-snippet
    (stripe-snippet (snippet-of ii) (snippet-of li))
    (snippet-of il))

where the occurrences of `li` are balanced.

the representation of the lower-degree one is:

  (stripe-snippet (snippet-of hi) (snippet-of hl))

To zip them, we need to be able to zip

  (ignore-highest (stripe ii li))
  hi

as well as two hypermonads of the same degree

  il
  hl


When you have only one level of striping...

^1( ,( ) )
   i  l i

  (      )
   h

but for the sake of implementing what we've already implemented in trees2.rkt, we can safely assume at this point that `i`, `l`, and `h` are all hypermonads based on monoids, so there's always just one hole to zip up, namely the degree-0 hole at the end.

So let's run by that again.

To define a hyperzip between (on the one hand) an at-least-two-degrees-striped hypermonad with its highest-degree holes ignored and (on the other hand) the hypermonad of the holes ignored that way, we need to pass in two hyperzips:

  Zip (ignore-highest (stripe ii li)) hi
  Zip il hl

That gives us some hypermonads automatically, and we need to pass in at least one more:

  ii

We probably don't need to pass in `ll` at all to make the hyperzip.

To define the at-least-two-degrees-striped hypermonad itself, with a representation of (double-stripe-snippet ii il li), we'll need to pass in a way to convert the representation to `ll` to assemble hole shapes for the map/bind callbacks, and we'll need hyperzips in order to insert the bind callback's results as interpolations.

  forall holeVals.
    (double-stripe-snippet ii il li) holeVals ->
    (snippet-of ll) holeVals
  Zip
    (ignore-highest (double-stripe ii il li ll ???))
    (stripe li
      (ignore-highest (ignore-highest (double-stripe ii il li ll ???))))
  Zip
    (ignore-highest (ignore-highest (double-stripe ii il li ll ???)))
    il

We probably need other parameters too, such as hypermonads like `ll` itself.

Hmm. What if we didn't require zips there, but just required appropriate functions?

  forall holeVals.
    (double-stripe-snippet ii il li) holeVals ->
    (snippet-of ll) holeVals
  forall holeVals.
    (double-stripe-snippet ii il li) (trivial-hole-vals) ->
    (stripe-snippet (snippet-of li) (double-stripe-snippet ii il li)) holeVals ->
    Maybe ((double-stripe-snippet ii il li) holeVals)
  forall holeVals.
    (double-stripe-snippet ii il li) (trivial-hole-vals) ->
    (snippet-of il) holeVals ->
    Maybe ((double-stripe-snippet ii il li) holeVals)

    (ignore-highest (double-stripe ii il li ll ???))
    (stripe li
      (ignore-highest (ignore-highest (double-stripe ii il li ll ???))))
  Zip
    (ignore-highest (ignore-highest (double-stripe ii il li ll ???)))
    il
